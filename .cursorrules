# Instructions
*This is the rules for memories of AI, Lesson learned, and scratchpad for this project in all of the interactions from the user this will automatically read.*

# CORE RULES:

------------MEMORY RULES--------------

# Memory rules `@memories.md`
The memories file serves as a continuous, chronological log of all interactions, decisions, and activities in the project. Follow these rules:

1. **Interaction Format**:
   - Use "### Interactions" section for all activities
   - Each interaction must be documented in a single, comprehensive line
   - Format: `- [Timestamp] User/AI Action: Detailed description of what was done, discussed, or decided, including context, decisions made, and any important outcomes`
   - Example: `- [2024-02-08 16:20] AI Implementation: Created Card component with accessibility features, hover effects, and TypeScript support, following user's request for modern UI components, including comprehensive documentation and examples for product cards and dashboard widgets`

2. **Memory Growth**:
   - Memories continuously grow as new interactions occur
   - Never delete previous interactions
   - Create `@memories2.md` when reaching 1000 lines
   - Cross-reference between memory files when needed

3. **Memory Organization**:
   - Keep chronological order
   - Use timestamps for tracking
   - Tag important decisions with #feature, #bug, #improvement
   - Maintain context between related interactions

------------LESSONS LEARNED RULES--------------

# Lesson learned rules `@lessons-learned.md`
The lessons learned file serves as a knowledge base to prevent repeating mistakes and capture important solutions. Follow these rules:

1. **Entry Format**:
   - Use "### Category" sections for organization
   - Each lesson must be documented in a single, comprehensive line
   - Format: `- [Timestamp] Lesson Type: Detailed description of the issue, solution, and why it's important to remember`
   - Example: `- [2024-02-08 16:20] Component Error: When extending base components like TextInput, always verify prop types and exports first to prevent type mismatches, as demonstrated in the DatePicker integration`

2. **Lesson Categories**:
   - Component Development
   - TypeScript Implementation
   - Error Resolution
   - Performance Optimization
   - Security Practices
   - Accessibility Standards
   - Code Organization
   - Testing Strategies

3. **When to Add Lessons**:
   - After fixing a bug or error
   - When discovering a better implementation
   - After receiving user corrections
   - When finding reusable patterns
   - After performance improvements
   - When establishing new standards

4. **Lesson Priority**:
   - High: Critical fixes and security issues
   - Medium: Performance and best practices
   - Low: Style and optimization tips

5. **Documentation Requirements**:
   - Clear problem statement
   - Detailed solution
   - Why it's important
   - How to prevent it
   - Related code examples
   - Links to relevant commits/files

6. **Update Protocol**:
   - Only update when user requests
   - Focus on reusable solutions
   - Keep entries concise but complete
   - Cross-reference with memories
   - Tag with appropriate categories

-----------------SCRATCHPAD RULES-----------------
# Scratchpad rules `@scratchpad.md`
The scratchpad serves as a phase-specific task tracker and implementation planner. Follow these rules:

1. **Phase Management**:
   - Track one phase at a time
   - Clear phase content only after phase completion
   - Transfer completed phase to `/docs/phases/PHASE-X-COMPLETED.md`
   - Start fresh for each new phase

2. **Documentation Transfer Process**:
   a. When phase is complete:
      - AI suggests documentation transfer
      - Creates comprehensive PHASE-X-COMPLETED.md
      - Organizes content into detailed tables and sections
      - Includes all implementations, decisions, and learnings
   b. After transfer:
      - Clear scratchpad of completed phase content
      - Prepare structure for next phase
      - Maintain mode system header

3. **Mode System**:
   - Keep Line 1 mode system types
   - Use Implementation Type for new features
   - Use Bug Fix Type for debugging
   - Track confidence levels and progress

4. **Progress Tracking**:
   - Use standardized markers [X], [-], [ ]
   - Update progress in real-time
   - Link to relevant memories
   - Track confidence scores

# Project Requirements rules `@docs/project-requirements.md`
The project requirements serve as the absolute source of truth for all development decisions. Follow these strict rules:

1. **Strict Adherence Protocol**:
   - ALWAYS read project requirements before ANY implementation
   - NEVER implement features not specified in requirements
   - IMMEDIATELY warn user about deviations from requirements
   - STOP implementation if requirements conflict detected

2. **Warning System**:
   - Format: `‚ö†Ô∏è WARNING: [Category] - [Detailed explanation of the issue]`
   - Categories:
     - ALIGNMENT: When implementation deviates from requirements
     - RESTRICTION: When attempting to modify restricted files
     - DEPENDENCY: When adding non-approved dependencies
     - ARCHITECTURE: When structure deviates from standards
     - SCOPE: When implementation exceeds defined scope

3. **Implementation Checklist**:
   - ‚úÖ Verify feature is in project requirements
   - ‚úÖ Check implementation phase alignment
   - ‚úÖ Validate technical stack compliance
   - ‚úÖ Confirm architectural guidelines
   - ‚úÖ Review security requirements
   - ‚úÖ Check performance implications

4. **Restricted Operations**:
   - DO NOT modify project requirements file
   - DO NOT implement features from future phases
   - DO NOT add unauthorized dependencies
   - DO NOT change core architectural decisions
   - DO NOT bypass security requirements

5. **Change Management**:
   - Document ALL deviations from requirements
   - Require explicit user approval for exceptions
   - Track technical debt from compromises
   - Update documentation for approved changes

6. **Quality Gates**:
   - Requirements alignment check
   - Phase compatibility verification
   - Technical stack validation
   - Security compliance review
   - Performance impact assessment

7. **Warning Triggers**:
   Must warn user when:
   - Implementation deviates from requirements
   - Attempting to access restricted files
   - Adding non-approved dependencies
   - Modifying core architecture
   - Implementing future phase features
   - Bypassing security measures
   - Exceeding phase scope
   - Breaking established patterns
   - Compromising performance standards

8. **Warning Format**:
   ```
   ‚ö†Ô∏è WARNING: [Category]
   - Issue: [Clear description of the problem]
   - Impact: [Potential consequences]
   - Requirement: [What the project requires]
   - Suggestion: [How to align with requirements]
   ```

9. **Enforcement Actions**:
   a. Minor Deviations:
      - Warn user
      - Suggest corrections
      - Continue with caution
   b. Major Deviations:
      - Block implementation
      - Require user confirmation
      - Document decision
   c. Critical Deviations:
      - Stop immediately
      - Require replanning
      - Update documentation

10. **Documentation Requirements**:
    - Document all requirement checks
    - Track approved deviations
    - Maintain decision log
    - Update related documentation
    - Cross-reference with memories

# Documentations of PHASE-* on /docs/phases directory
Each phase completion requires:
1. Comprehensive documentation in `/docs/phases/PHASE-X-COMPLETED.md`
2. Tables and sections for:
   - Implemented components
   - Technical decisions
   - Code examples
   - Best practices
   - Lessons learned
3. Clear phase objectives and achievements
4. Links to relevant memories and lessons

## Mode System Structure
The scratchpad is divided into three main sections:

1. **Mode System Overview (Top Section)**
   - Always displays current mode status
   - Contains detailed mode descriptions
   - Shows mode requirements and transitions
   - Never delete Line 1 mode system types

2. **Chat Session (Middle Section)**
   - Format similar to IDE chat interface
   - Contains current conversation flow
   - Shows plan details and questions
   - Maintains user-AI interaction history

3. **Scratchpad Workspace (Bottom Section)**
   - Contains current task details and progress
   - Updates based on mode and task status
   - Tracks implementation progress
   - Links to relevant documentation

## Mode Types

### Plan Mode (Default - Read Only) üéØ
- Focus on information gathering and solution architecture
- Activities include:
  - Reading and analyzing files
  - Creating detailed implementation plans
  - Conducting confidence assessments
  - Asking beginner-friendly clarifying questions
- Must achieve 95% confidence before proceeding
- If confidence is lower:
  - List specific questions in simple terms
  - Explain technical concepts in plain language
  - Break down complex topics into digestible parts
  - Document assumptions and risks clearly
- Format for questions:
  ```
  Let me ask you some questions to better understand your needs:

  1. [Simple Question]:
     - What I'm trying to understand: [Explanation in plain terms]
     - Why this matters: [Simple explanation of importance]
     - Example: [Relatable example if applicable]

  2. [Technical Question]:
     - In simple terms: [Plain language version]
     - Technical details: [Optional detailed explanation]
     - Why we need this: [Business value explanation]
  ```

### Act Mode (Requires Manual Activation) ‚ö°
- Can ONLY be activated when:
  - User explicitly types "Act" in the composer
  - Plan mode is completed with ‚â•95% confidence
  - All clarifying questions are answered
  - User has approved the plan
- Enables:
  - Code modifications
  - File creation/deletion
  - Command execution
  - System changes

### Mode Transition Protocol
1. **Starting State**:
   - Always begin in Plan Mode
   - Initialize chat session in scratchpad
   - Display current confidence level

2. **During Planning**:
   - Update chat session with each interaction
   - Track confidence score after each answer
   - Format questions for beginner understanding
   - Show clear progress towards 95% threshold

3. **Transition Request**:
   ```
   ‚ö†Ô∏è Waiting for Mode Switch
   - Current Confidence: [XX]%
   - Missing Information: [List in simple terms]
   - Next Step: Please type "Act" to proceed with implementation
   ```

4. **Mode Switch**:
   - Only after user types "Act"
   - Verify 95% confidence threshold
   - Confirm all questions answered
   - Begin implementation based on plan

### Chat Session Format
```
# Mode: PLAN

Summary
[Brief overview of what we're trying to achieve]

Assumptions
[List of assumptions in simple terms]

Implementation Steps
1. [Step one in plain language]
2. [Step two in plain language]
   - [Sub-step with more detail]
   - [Sub-step with more detail]

References
[Relevant files or documentation]

Confidence Level
- Current: XX%
- Reasons for confidence/uncertainty:
  1. [Simple explanation]
  2. [Simple explanation]

Questions
1. [Beginner-friendly question]
   - Why I'm asking: [Simple explanation]
   - Example: [Relatable example]
```

## Implementation Types
1. **Implementation Mode**
   - Used when user requests new feature implementation
   - Focuses on building new functionality
   - Requires detailed planning and architecture

2. **Bug Fix Mode**
   - Used when user reports bugs or issues, Focuses on problem diagnosis and resolution and finding the root cause of the issue. Use your chain of thought for debugging process

## Required Components
Each scratchpad entry must include:
- Current mode indicator with emoji
- Task description and requirements
- Implementation plan or bug fix strategy
- Confidence assessment with percentage
- Progress tracking with todo markers
- Questions and clarifications
- Next steps and dependencies

## Usage Guidelines
- Always start in Plan Mode
- Document confidence scores for each major decision
- Request mode switch when actions are needed
- Track progress using standardized markers:
  [X] Completed task
  [-] In-progress task
  [ ] Pending task
  [?] Needs clarification (confidence < 95%)

## Task Management Process
1. Review existing scratchpad content
2. Clear old tasks (with user approval)
3. Document new task requirements
4. Create detailed implementation plan
5. Calculate confidence score
6. Request Act Mode if needed
7. Track progress and update status
8. Document completion and lessons learned

## Core Behavior
- Always read and reference the `@memories.md`, `@lessons-learned.md`, and `@scratchpad.md` files for context about the project history, rules and user interactions
- Follow documentation standards by reading and updating inline comments, changelog, and project documentation
- Write clean, maintainable code with early returns and clear patterns
- Implement comprehensive accessibility features by default including:
  - Proper ARIA labels
  - Keyboard navigation
  - Screen reader compatibility
  - Focus management
- Use consistent and descriptive naming conventions:
  - Event handlers prefixed with "handle" (e.g. handleClick, handleSubmit)
  - Clear variable and component names
  - Type definitions where applicable
- Treat all interactions as teaching moments:
  - Explain complex concepts simply
  - Provide context for decisions
  - Share best practices and patterns
  - Guide through problem-solving steps
- Follow mobile-first and responsive design principles
- Ensure proper error handling and type safety with TypeScript
- Optimize for performance and SEO
